/*
 * Title: OvalMate_DevBoard
 * Version: 0.0.1
 * Filename: LPC55S16_Project_main_dev.c
 * Authors: Alex Wissing
 * Purpose of Program: Operate a LPC55S16-EVK devlopment board
 * 		with the needed capabilities for the OvalMate project
 * 		(USB device, PWM to 2 steppers and a servo motor, Bump switch interrupts,
 * 		LED handling for error codes and status codes via 7-segment display).
 * How Program is Run on Target System:
 * Date Started: 2/05/2022
 * Update History:
 *
 */

/*
 * Copyright 2016-2022 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// CORE INCLUDES
#include <stdio.h>
#include "board.h"
#include "clock_config.h"
#include "fsl_debug_console.h"
#include "LPC55S16.h"
#include "peripherals.h"
#include "pin_mux.h"

// ADC INCLUDES
#include "fsl_lpadc.h"

// PWM INCLUDES
#include "fsl_sctimer.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/

// Stepper PWM Global Definitions
#define SCTIMER_CLK_FREQ        CLOCK_GetFreq(kCLOCK_BusClk)
#define X_SCTIMER_OUT			kSCTIMER_Out_0
#define Y_SCTIMER_OUT			kSCTIMER_Out_1
#define SETUP_STEPPER_X			0
#define SETUP_STEPPER_Y			1
#define SETUP_STEPPER_BOTH		2
// End Stepper PWM Global Definitions

// ADC Definitions
#define DEMO_LPADC_BASE						ADC0
#define DEMO_LPADC_USER_CHANNEL				0U
#define DEMO_LPADC_USER_CMDID				1U /* CMD1 */
#define DEMO_LPADC_VREF_SOURCE				kLPADC_ReferenceVoltageAlt2
#define DEMO_LPADC_DO_OFFSET_CALIBRATION	true
#define DEMO_LPADC_USE_HIGH_RESOLUTION		true
// End ADC Definitions

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

// ADC Prototypes
int getADCValue(void);
void initializeADC(void);
// End ADC Prototypes

// Stepper PWM Prototypes
void setupStepperPWM(void);
void initializeStepperPWM(void);
// End Stepper PWM Prototypes

/*******************************************************************************
 * Global Variables
 ******************************************************************************/

// Stepper PWM Global Variables
sctimer_config_t sctimerInfo;
sctimer_pwm_signal_param_t pwmParam;
uint32_t event;
uint32_t sctimerClock;
// End Stepper PWM Global Variables

// ADC Global Variables
#if (defined(DEMO_LPADC_USE_HIGH_RESOLUTION) && DEMO_LPADC_USE_HIGH_RESOLUTION)
const uint32_t g_LpadcFullRange   = 65536U;
const uint32_t g_LpadcResultShift = 0U;
#else
const uint32_t g_LpadcFullRange   = 4096U;
const uint32_t g_LpadcResultShift = 3U;
#endif /* DEMO_LPADC_USE_HIGH_RESOLUTION */

lpadc_config_t mLpadcConfigStruct;
lpadc_conv_trigger_config_t mLpadcTriggerConfigStruct;
lpadc_conv_command_config_t mLpadcCommandConfigStruct;
lpadc_conv_result_t mLpadcResultConfigStruct;
// End ADC Global Variables

/*
 * @brief   Application entry point.
 */
int main(void) {

	/* Init board hardware. */
	BOARD_InitBootPins();
	BOARD_InitBootClocks();
	BOARD_InitBootPeripherals();
#ifndef BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL
	/* Init FSL debug console. */
	BOARD_InitDebugConsole();
#endif

	PRINTF("Hello World\n");

	initializeADC();
	initializeStepperPWM();
	setupStepperPWM(SETUP_STEPPER_BOTH);

	/* Force the counter to be placed into memory. */
	volatile static int i = 0 ;
	/* Enter an infinite loop, just incrementing a counter. */
	while(1) {
		i++ ;
		/* 'Dummy' NOP to allow source level single stepping of
			tight while() loop */
		__asm volatile ("nop");
	}
	return 0;
}

int getADCValue() {
	PRINTF("ADC Full Range: %d\r\n", g_LpadcFullRange);
#if defined(FSL_FEATURE_LPADC_HAS_CMDL_CSCALE) && FSL_FEATURE_LPADC_HAS_CMDL_CSCALE
	if (kLPADC_SampleFullScale == mLpadcCommandConfigStruct.sampleScaleMode)
	{
		PRINTF("Full channel scale (Factor of 1).\r\n");
	}
	else if (kLPADC_SamplePartScale == mLpadcCommandConfigStruct.sampleScaleMode)
	{
		PRINTF("Divided input voltage signal. (Factor of 30/64).\r\n");
	}
#endif

	PRINTF("Please press any key to get user channel's ADC value.\r\n");
	int counter = 0;
	while (1)
	{
		GETCHAR();
		LPADC_DoSoftwareTrigger(DEMO_LPADC_BASE, 1U); /* 1U is trigger0 mask. */
#if (defined(FSL_FEATURE_LPADC_FIFO_COUNT) && (FSL_FEATURE_LPADC_FIFO_COUNT == 2U))
		while (!LPADC_GetConvResult(DEMO_LPADC_BASE, &mLpadcResultConfigStruct, 0U))
#else
		while (!LPADC_GetConvResult(DEMO_LPADC_BASE, &mLpadcResultConfigStruct))
#endif /* FSL_FEATURE_LPADC_FIFO_COUNT */
		{
		}
		//if (counter == sizeLastValues) {
		//	int sum = 0;
		//	for (int i = 0; i < sizeLastValues; i++) {
		//		sum += last100Values[i];
		//	}
		//	PRINTF("\r\n SUM: %d, SIZE: %d\r\n", sum, sizeLastValues);
		//	PRINTF("ADC value AVG: %d\r\n\r\n", (sum / sizeLastValues));
		//	counter = 0;
		//}
		//last100Values[counter] = ((mLpadcResultConfigStruct.convValue) >> g_LpadcResultShift);

		PRINTF("ADC value: %d\r\n", ((mLpadcResultConfigStruct.convValue) >> g_LpadcResultShift));
		//PRINTF("counter: %d, sizeof(last100Values): %d, value[counter]: %d \r\n", counter, sizeLastValues, last100Values[counter]);
		//counter++;
		return ((mLpadcResultConfigStruct.convValue) >> g_LpadcResultShift);
	}
}

void startStepperPWM() {
    /* Start the 32-bit unify timer */
    SCTIMER_StartTimer(SCT0, kSCTIMER_Counter_U);
}

void setupStepperPWM(int which) {
	/* Configure first PWM with frequency 24kHZ from first output */
	if (which == 0 || which == 2) {
		pwmParam.output           = X_SCTIMER_OUT;
		pwmParam.level            = kSCTIMER_HighTrue;
		pwmParam.dutyCyclePercent = 50;
		if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_CenterAlignedPwm, 2000U, sctimerClock, &event) == kStatus_Fail)
		{
			return -1;
		}
	}

	/* Configure second PWM with different duty cycle but same frequency as before */
	if (which == 1 || which == 2) {
		pwmParam.output           = Y_SCTIMER_OUT;
		pwmParam.level            = kSCTIMER_HighTrue;
		pwmParam.dutyCyclePercent = 50;
		if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_CenterAlignedPwm, 2000U, sctimerClock, &event) == kStatus_Fail)
		{
			return -1;
		}
	}
}

void initializeStepperPWM() {
	sctimerClock = SCTIMER_CLK_FREQ;

	/* Print a note to terminal */
	PRINTF("\r\nSCTimer example to output 2 center-aligned PWM signals\r\n");
	PRINTF("\r\nProbe the signal using an oscilloscope");

	SCTIMER_GetDefaultConfig(&sctimerInfo);

	/* Initialize SCTimer module */
	SCTIMER_Init(SCT0, &sctimerInfo);
}

void initializeADC() {
	PRINTF("LPADC Polling Example\r\n");

	LPADC_GetDefaultConfig(&mLpadcConfigStruct);
	mLpadcConfigStruct.enableAnalogPreliminary = true;
#if defined(DEMO_LPADC_VREF_SOURCE)
	mLpadcConfigStruct.referenceVoltageSource = DEMO_LPADC_VREF_SOURCE;
#endif /* DEMO_LPADC_VREF_SOURCE */
#if defined(FSL_FEATURE_LPADC_HAS_CTRL_CAL_AVGS) && FSL_FEATURE_LPADC_HAS_CTRL_CAL_AVGS
	mLpadcConfigStruct.conversionAverageMode = kLPADC_ConversionAverage128;
#endif /* FSL_FEATURE_LPADC_HAS_CTRL_CAL_AVGS */
	LPADC_Init(DEMO_LPADC_BASE, &mLpadcConfigStruct);

#if defined(FSL_FEATURE_LPADC_HAS_CTRL_CALOFS) && FSL_FEATURE_LPADC_HAS_CTRL_CALOFS
#if defined(FSL_FEATURE_LPADC_HAS_OFSTRIM) && FSL_FEATURE_LPADC_HAS_OFSTRIM
	/* Request offset calibration. */
#if defined(DEMO_LPADC_DO_OFFSET_CALIBRATION) && DEMO_LPADC_DO_OFFSET_CALIBRATION
	LPADC_DoOffsetCalibration(DEMO_LPADC_BASE);
#else
	LPADC_SetOffsetValue(DEMO_LPADC_BASE, DEMO_LPADC_OFFSET_VALUE_A, DEMO_LPADC_OFFSET_VALUE_B);
#endif /* DEMO_LPADC_DO_OFFSET_CALIBRATION */
#endif /* FSL_FEATURE_LPADC_HAS_OFSTRIM */
	/* Request gain calibration. */
	LPADC_DoAutoCalibration(DEMO_LPADC_BASE);
#endif /* FSL_FEATURE_LPADC_HAS_CTRL_CALOFS */

#if (defined(FSL_FEATURE_LPADC_HAS_CFG_CALOFS) && FSL_FEATURE_LPADC_HAS_CFG_CALOFS)
	/* Do auto calibration. */
	LPADC_DoAutoCalibration(DEMO_LPADC_BASE);
#endif /* FSL_FEATURE_LPADC_HAS_CFG_CALOFS */

	/* Set conversion CMD configuration. */
	LPADC_GetDefaultConvCommandConfig(&mLpadcCommandConfigStruct);
	mLpadcCommandConfigStruct.channelNumber = DEMO_LPADC_USER_CHANNEL;
#if defined(DEMO_LPADC_USE_HIGH_RESOLUTION) && DEMO_LPADC_USE_HIGH_RESOLUTION
	mLpadcCommandConfigStruct.conversionResolutionMode = kLPADC_ConversionResolutionHigh;
#endif /* DEMO_LPADC_USE_HIGH_RESOLUTION */
	LPADC_SetConvCommandConfig(DEMO_LPADC_BASE, DEMO_LPADC_USER_CMDID, &mLpadcCommandConfigStruct);

	/* Set trigger configuration. */
	LPADC_GetDefaultConvTriggerConfig(&mLpadcTriggerConfigStruct);
	mLpadcTriggerConfigStruct.targetCommandId       = DEMO_LPADC_USER_CMDID;
	mLpadcTriggerConfigStruct.enableHardwareTrigger = false;
	LPADC_SetConvTriggerConfig(DEMO_LPADC_BASE, 0U, &mLpadcTriggerConfigStruct); /* Configurate the trigger0. */
}
