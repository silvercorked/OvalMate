/*
 * Title: OvalMate_DevBoard
 * Version: 0.0.1
 * Filename: LPC55S16_Project_main_dev.c
 * Authors: Alex Wissing
 * Purpose of Program: Operate a LPC55S16-EVK devlopment board
 * 		with the needed capabilities for the OvalMate project
 * 		(USB device, PWM to 2 steppers and a servo motor, Bump switch interrupts,
 * 		LED handling for error codes and status codes via 7-segment display).
 * How Program is Run on Target System:
 * Date Started: 2/05/2022
 * Update History:
 *
 */

/*
 * Copyright 2016-2022 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* next tasks:
 * learn how to stop and track pwm sctimer
 * setup ctimer for servo
 * test bump switch interrupts
 * setup git repo
 *
 */

// CORE INCLUDES
#include <stdio.h>
#include "board.h"
#include "clock_config.h"
#include "fsl_debug_console.h"
#include "LPC55S16.h"
#include "peripherals.h"
#include "pin_mux.h"

// MODULE INCLUDES
#include "modules/sevenSegmentLED/sevenSegmentLED.h" // 7 segment display
#include "modules/irSensor/irSensor.h" // irSensor via ADC
#include "modules/servo/servo.h" // servo via CTIMER
#include "modules/buttons/buttons.h" // button interrupts via pin_mux
#include "modules/steppers/steppers.h" // stepper via SCTIMER 2 in 16-bit mode

/*******************************************************************************
 * Prototypes
 ******************************************************************************/



sctimer_interrupt_enable_t a;
sctimer_event_t b; // kSCTIMER_OutputLowEvent on low, count step
 // on n - 1 steps, SCTIMER_createAndScheduleEvent w/ kSCTIMER_OutputLowEven
 // then SCTIMER_SetupOutputClearAction with ^^ event to clear output to IO pin and continue timer operation

void delay(void)
{
    volatile uint32_t i = 0U;
    for (i = 0U; i < 20000000U; ++i)
    {
        __asm("NOP"); /* delay */
    }
}

/*
 * @brief   Application entry point.
 */
int main(void) {

	/* Init board hardware. */
	BOARD_InitBootPins();
	BOARD_InitBootClocks();
	BOARD_InitBootPeripherals();
#ifndef BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL
	/* Init FSL debug console. */
	BOARD_InitDebugConsole();
#endif

	PRINTF("Hello World\n");

	initialize7SegLegs();
	assignPinsToInterrupts();
	initializeADC();
	initializeStepperPWM();
	setupStepperPWM(motorX, 360);
	setupStepperPWM(motorY, 360);
	startStepperPWM(motorX);
	startStepperPWM(motorY);
	initializeServoPWM();
	setupServoPWM();
	startServoPWM();

	set7Seg(0, 0, 1, 0, 1, 0, 1);

	/* Force the counter to be placed into memory. */
	volatile static int i = 0 ;
	/* Enter an infinite loop, just incrementing a counter. */
	while(1) {
		i++ ;
		/* 'Dummy' NOP to allow source level single stepping of
			tight while() loop */
		delay();
		if (i % 2 == 1) {
			updateServoPWMDutyCycle(PENDOWN);
			PRINTF("\r\nPENDOWN");
			set7Seg(0, 0, 1, 0, 1, 0, 1);
		}
		else {
			updateServoPWMDutyCycle(PENUP);
			PRINTF("\r\nPENUP");
			set7Seg(1, 1, 0, 1, 0, 1, 0);
		}
		__asm volatile ("nop");
	}
	return 0;
}
