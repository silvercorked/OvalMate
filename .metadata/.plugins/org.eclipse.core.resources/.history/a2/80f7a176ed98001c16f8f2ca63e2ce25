/*
 * Title: OvalMate_DevBoard
 * Version: 0.0.1
 * Filename: LPC55S16_Project_main_dev.c
 * Authors: Alex Wissing
 * Purpose of Program: Operate a LPC55S16-EVK devlopment board
 * 		with the needed capabilities for the OvalMate project
 * 		(USB device, PWM to 2 steppers and a servo motor, Bump switch interrupts,
 * 		LED handling for error codes and status codes via 7-segment display).
 * How Program is Run on Target System:
 * Date Started: 2/05/2022
 * Update History:
 *
 */

/*
 * Copyright 2016-2022 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* next tasks:
 * learn how to stop and track pwm sctimer
 * setup ctimer for servo
 * test bump switch interrupts
 * setup git repo
 *
 */

// CORE INCLUDES
#include <stdio.h>
#include "board.h"
#include "clock_config.h"
#include "fsl_debug_console.h"
#include "LPC55S16.h"
#include "peripherals.h"
#include "pin_mux.h"

// MODULE INCLUDES
#include "modules/sevenSegmentLED/sevenSegmentLED.h" // 7 segment display
#include "modules/irSensor/irSensor.h" // irSensor via ADC
#include "modules/servo/servo.h" // servo via CTIMER
#include "modules/buttons/buttons.h" // button interrupts via pin_mux

// INTERRUPT INCLUDES
#include "fsl_pint.h"
#include "fsl_common.h"
#include "fsl_inputmux.h"
#include "fsl_power.h"

// PWM INCLUDES
#include "fsl_sctimer.h"


/*******************************************************************************
 * Definitions
 ******************************************************************************/

// Interrupt Global Definitions
#define PINT_PIN_INT1_SRC			kINPUTMUX_GpioPort1Pin25ToPintsel // right
#define PINT_PIN_INT2_SRC			kINPUTMUX_GpioPort1Pin26ToPintsel // left
#define PINT_PIN_INT3_SRC			kINPUTMUX_GpioPort1Pin27ToPintsel // down
#define PINT_PIN_INT4_SRC			kINPUTMUX_GpioPort0Pin9ToPintsel  // up
#define PINT_PIN_INT0_SRC			kINPUTMUX_GpioPort0Pin0ToPintsel  // emergency
// #define DEMO_SEC_PINT_PIN_INT0_SRC kINPUTMUX_GpioPort0Pin5ToPintSecsel
// End Interrupt Global Definitions

// Stepper PWM Global Definitions
#define SCTIMER_CLK_FREQ        CLOCK_GetFreq(kCLOCK_BusClk)
#define X_SCTIMER_OUT			kSCTIMER_Out_0
#define Y_SCTIMER_OUT			kSCTIMER_Out_1
#define SETUP_STEPPER_X			0
#define SETUP_STEPPER_Y			1
#define SETUP_STEPPER_BOTH		2
// End Stepper PWM Global Definitions

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

// Interrupt Prototypes
void buttonEmergencyCallback(pint_pin_int_t pintr, uint32_t pmatch_status);
void bumpRightCallback(pint_pin_int_t pintr, uint32_t pmatch_status);
void bumpLeftCallback(pint_pin_int_t pintr, uint32_t pmatch_status);
void bumpUpCallback(pint_pin_int_t pintr, uint32_t pmatch_status);
void bumpDownCallback(pint_pin_int_t pintr, uint32_t pmatch_status);
void assignPinsToInterrupts(void);
// End Interrupt Prototypes

// Stepper PWM Prototypes
void startStepperPWM(void);
status_t setupStepperPWM(int which);
void initializeStepperPWM(void);
// End Stepper PWM Prototypes

sctimer_interrupt_enable_t a;
sctimer_event_t b; // kSCTIMER_OutputLowEvent on low, count step
 // on n - 1 steps, SCTIMER_createAndScheduleEvent w/ kSCTIMER_OutputLowEven
 // then SCTIMER_SetupOutputClearAction with ^^ event to clear output to IO pin and continue timer operation

void delay(void)
{
    volatile uint32_t i = 0U;
    for (i = 0U; i < 20000000U; ++i)
    {
        __asm("NOP"); /* delay */
    }
}

/*******************************************************************************
 * Global Variables
 ******************************************************************************/

// Stepper PWM Global Variables
sctimer_config_t sctimerInfo;
sctimer_pwm_signal_param_t pwmParam;
uint32_t event;
uint32_t sctimerClock;
uint32_t totalJobStepsX; // total steps in X for current task
uint32_t totalJobStepsY;
uint32_t jobStepCountX; // current count of steps
uint32_t jobStepCountY;
bool directionX;
bool directionY;
uint32_t pwmEventNumberX;
uint32_t pwmEventNumberY;
// End Stepper PWM Global Variables

/*
 * @brief   Application entry point.
 */
int main(void) {

	/* Init board hardware. */
	BOARD_InitBootPins();
	BOARD_InitBootClocks();
	BOARD_InitBootPeripherals();
#ifndef BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL
	/* Init FSL debug console. */
	BOARD_InitDebugConsole();
#endif

	PRINTF("Hello World\n");

	initialize7SegLegs();
	assignPinsToInterrupts();
	initializeADC();
	initializeStepperPWM();
	setupStepperPWM(SETUP_STEPPER_BOTH);
	startStepperPWM();
	initializeServoPWM();
	setupServoPWM();
	startServoPWM();

	set7Seg(0, 0, 1, 0, 1, 0, 1);

	/* Force the counter to be placed into memory. */
	volatile static int i = 0 ;
	/* Enter an infinite loop, just incrementing a counter. */
	while(1) {
		i++ ;
		/* 'Dummy' NOP to allow source level single stepping of
			tight while() loop */
		delay();
		if (i % 2 == 1) {
			updateServoPWMDutyCycle(PENDOWN);
			PRINTF("\r\nPENDOWN");
			set7Seg(0, 0, 1, 0, 1, 0, 1);
		}
		else {
			updateServoPWMDutyCycle(PENUP);
			PRINTF("\r\nPENUP");
			set7Seg(1, 1, 0, 1, 0, 1, 0);
		}
		__asm volatile ("nop");
	}
	return 0;
}

/*!
 * @brief Call back for PINT Pin interrupt 0.
 */
void buttonEmergencyCallback(pint_pin_int_t pintr, uint32_t pmatch_status)
{
	PRINTF("\f\r\nPINT Pin Interrupt %d event detected. EMERGENCY SWITCH", pintr);
}

/*!
 * @brief Call back for PINT Pin interrupt 1.
 */
void bumpRightCallback(pint_pin_int_t pintr, uint32_t pmatch_status)
{
	PRINTF("\f\r\nPINT Pin Interrupt %d event detected. Right", pintr);
}

/*!
 * @brief Call back for PINT Pin interrupt 2.
 */
void bumpLeftCallback(pint_pin_int_t pintr, uint32_t pmatch_status)
{
	PRINTF("\f\r\nPINT Pin Interrupt %d event detected. Left", pintr);
}

/*!
 * @brief Call back for PINT Pin interrupt 3.
 */
void bumpUpCallback(pint_pin_int_t pintr, uint32_t pmatch_status)
{
	PRINTF("\f\r\nPINT Pin Interrupt %d event detected. Up", pintr);
}

/*!
 * @brief Call back for PINT Pin interrupt 4.
 */
void bumpDownCallback(pint_pin_int_t pintr, uint32_t pmatch_status)
{
	PRINTF("\f\r\nPINT Pin Interrupt %d event detected. Down", pintr);
}

void assignPinsToInterrupts() {
	/* Connect trigger sources to PINT */
	INPUTMUX_Init(INPUTMUX);
	INPUTMUX_AttachSignal(INPUTMUX, kPINT_PinInt1, PINT_PIN_INT1_SRC); // right bump switch
	INPUTMUX_AttachSignal(INPUTMUX, kPINT_PinInt2, PINT_PIN_INT2_SRC); // left bump switch
	INPUTMUX_AttachSignal(INPUTMUX, kPINT_PinInt3, PINT_PIN_INT3_SRC); // down bump switch
	INPUTMUX_AttachSignal(INPUTMUX, kPINT_PinInt4, PINT_PIN_INT4_SRC); // up bump switch
	INPUTMUX_AttachSignal(INPUTMUX, kPINT_PinInt0, PINT_PIN_INT0_SRC); // emergency bump switch
	/* Turnoff clock to inputmux to save power. Clock is only needed to make changes */
	INPUTMUX_Deinit(INPUTMUX);

	PRINTF("\f\r\nPINT Pin interrupt example\r\n");

	/* Initialize PINT */
	PINT_Init(PINT);

	/* Setup Pin Interrupt 0 for rising edge */
	PINT_PinInterruptConfig(PINT, kPINT_PinInt0, kPINT_PinIntEnableRiseEdge, buttonEmergencyCallback);
	/* Enable callbacks for PINT0 by Index */
	PINT_EnableCallbackByIndex(PINT, kPINT_PinInt0);

	/* Setup Pin Interrupt 1 for falling edge */
	PINT_PinInterruptConfig(PINT, kPINT_PinInt1, kPINT_PinIntEnableRiseEdge, bumpRightCallback);
	/* Enable callbacks for PINT1 by Index */
	PINT_EnableCallbackByIndex(PINT, kPINT_PinInt1);

	/* Setup Pin Interrupt 2 for falling edge */
	PINT_PinInterruptConfig(PINT, kPINT_PinInt2, kPINT_PinIntEnableRiseEdge, bumpLeftCallback);
	/* Enable callbacks for PINT2 by Index */
	PINT_EnableCallbackByIndex(PINT, kPINT_PinInt2);

	/* Setup Pin Interrupt 3 for falling edge */
	PINT_PinInterruptConfig(PINT, kPINT_PinInt3, kPINT_PinIntEnableRiseEdge, bumpDownCallback);
	/* Enable callbacks for PINT3 by Index */
	PINT_EnableCallbackByIndex(PINT, kPINT_PinInt3);

	/* Setup Pin Interrupt 4 for falling edge */
	PINT_PinInterruptConfig(PINT, kPINT_PinInt4, kPINT_PinIntEnableRiseEdge, bumpUpCallback);
	/* Enable callbacks for PINT4 by Index */
	PINT_EnableCallbackByIndex(PINT, kPINT_PinInt4);

	PRINTF("\r\nPINT Pin Interrupt events are configured\r\n");
	PRINTF("\r\nPress corresponding switches to generate events\r\n");
}

void startStepperPWM() {
    /* Start the 32-bit unify timer */
    SCTIMER_StartTimer(SCT0, kSCTIMER_Counter_U);
}

status_t setupStepperPWM(int which, uint32_t stepsX, bool dirX, uint32_t stepsY, bool dirY) {

	/* Configure first PWM with frequency 2kHZ from first output */
	if (which == 0 || which == 2) {
		pwmParam.output           = X_SCTIMER_OUT;
		pwmParam.level            = kSCTIMER_HighTrue;
		pwmParam.dutyCyclePercent = 50;
		if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_CenterAlignedPwm, 2000U, sctimerClock, &pwmEventNumberX) == kStatus_Fail)
		{
			return kStatus_Fail;
		}
	    /* Enable interrupt flag for event associated with out 4, we use the interrupt to update dutycycle */
	    SCTIMER_EnableInterrupts(SCT0, (1 << pwmEventNumberX));
	    /* Receive notification when event is triggered */
	    SCTIMER_SetCallback(SCT0, SCTIMER_LED_HANDLER, pwmEventNumberX);
	}

	/* Configure second PWM with different duty cycle but same frequency as before */
	if (which == 1 || which == 2) {
		pwmParam.output           = Y_SCTIMER_OUT;
		pwmParam.level            = kSCTIMER_HighTrue;
		pwmParam.dutyCyclePercent = 50;
		if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_CenterAlignedPwm, 2000U, sctimerClock, &pwmEventNumberY) == kStatus_Fail)
		{
			return kStatus_Fail;
		}
	    /* Enable interrupt flag for event associated with out 4, we use the interrupt to update dutycycle */
	    SCTIMER_EnableInterrupts(SCT0, (1 << pwmEventNumberY));
	    /* Receive notification when event is triggered */
	    SCTIMER_SetCallback(SCT0, SCTIMER_LED_HANDLER, pwmEventNumberY);
	}
    /* Enable at the NVIC */
    EnableIRQ(SCT0_IRQn);
	return kStatus_Success;
}

void initializeStepperPWM() {
	sctimerClock = SCTIMER_CLK_FREQ;

	/* Print a note to terminal */
	PRINTF("\r\nSCTimer example to output 2 center-aligned PWM signals @ %d Hz\r\n", sctimerClock);
	PRINTF("\r\nProbe the signal using an oscilloscope\r\n");

	SCTIMER_GetDefaultConfig(&sctimerInfo);

	/* Initialize SCTimer module */
	SCTIMER_Init(SCT0, &sctimerInfo);
}
